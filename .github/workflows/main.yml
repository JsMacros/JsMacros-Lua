# This is a basic workflow to help you get started with Actions

name: Build Release

# Controls when the action will run. 
on:
  release:
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get Js Macros
        uses: benday-inc/download-latest-artifact@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository_owner: 'wagyourtail'
          repository_name: 'jsmacros'
          workflow_name: 'Build Beta'
          branch_name: 'master'
          download_path: '${{ github.workspace }}/libs'
          download_filename: 'jsmacros.zip'
      - name: UnZip Js Macros
        uses: TonyBogdanov/zip@1.0
        with:
          args: unzip -qq ./libs/jsmacros.zip -d ./libs
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - uses: actions/github-script@v2
        id: jsmvers
        with:
          result-encoding: string
          script: |
            const fs = require("fs")
            let version = fs.readdirSync("./libs/").filter(e => !e.endsWith("dev.jar") && !e.endsWith("sources.jar") && e.endsWith(".jar"))[0].replace(".jar", "").replace(/jsmacros-.+?-/, "");
            let file = fs.readFileSync("./gradle.properties");
            file = file.toString().split("\n").map(e => e.trim().startsWith("jsmacros_version") ? `${e.split("=")[0]}=${version}` : e).join("\n");
            fs.writeFileSync("./gradle.properties", file)

      - name: Build with Gradle
        run: ./gradlew build

      - uses: actions/github-script@v2
        id: fname
        with:
          result-encoding: string
          script: |
            const fs = require("fs")
            return fs.readdirSync("./build/libs/").filter(e => !e.endsWith("dev.jar") && !e.endsWith("sources.jar") && e.endsWith(".jar"))[0].replace(".jar", "");

      - name: Upload to release
        uses: JasonEtco/upload-to-release@master
        with:
          args: ./build/libs/${{ steps.fname.outputs.result }}.jar application/jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload to curseforge
        uses: itsmeow/curseforge-upload@v2
        with:
          token: ${{ secrets.CF_API_KEY }}
          project_id: 403190
          game_endpoint: minecraft
          file_path: ./build/libs/${{ steps.fname.outputs.result }}.jar
          changelog: See the github release for changes.
          display_name: ${{ steps.fname.outputs.result }}
          game_versions: 70886:1.16.4,70886:1.16.3,70886:1.16.2,68722:1.15.2,64806:1.14.4,2:Java 8,68441:Fabric
          release_type: release
          relations: modmenu:optionalDependency,jsmacros:requiredDependency
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.fname.outputs.result }}
          path: ./build/libs/*
